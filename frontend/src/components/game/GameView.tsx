// frontend/src/components/game/GameView.tsx
'use client';

import { useState, useEffect, useMemo } from 'react';
import LetterButtons from './LetterButtons';
import WordGrid from './WordGrid';
import { useProgress } from '@/context/ProgressContext';

function WordBuilder({ word }: { word: string }) {
    // ... (—ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    return (
        <div className="my-6 flex justify-center items-center h-16 bg-white border-2 rounded-lg shadow-inner">
            <p className="text-3xl font-bold tracking-[.2em] text-gray-800">
            {word.toUpperCase()}
            </p>
        </div>
    );
}

type GameViewProps = { levelId: number; onBackToMenu: () => void; };
type LevelData = { id: number; baseWord: string; wordsLengths: number[]; };

export default function GameView({ levelId, onBackToMenu }: GameViewProps) {
  const [levelData, setLevelData] = useState<LevelData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [currentWord, setCurrentWord] = useState('');
  const [usedIndices, setUsedIndices] = useState<number[]>([]);
  const [isShaking, setIsShaking] = useState(false);
  const [isChecking, setIsChecking] = useState(false);

  // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç progress –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ >>>
  const { progress, addFoundWord } = useProgress();
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¢–ï–ö–£–©–ï–ì–û —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const foundWords = useMemo(() => progress[levelId] || [], [progress, levelId]);

  // ... (useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
  useEffect(() => { /* ... */ }, [levelId]);

  const letters = useMemo(() => {
    if (!levelData) return [];
    return levelData.baseWord.split('');
  }, [levelData]);

  // ... (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ handleSubmitWord, handleHint –∏ —Ç.–¥. –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
  const handleLetterClick = (letter: string, index: number) => { /* ... */ };
  const handleDeleteLastLetter = () => { /* ... */ };
  const clearInput = () => { /* ... */ };
  const handleSubmitWord = async () => { /* ... */ };
  const handleHint = async () => { /* ... */ };

  // ... (JSX –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è...</div>;
  if (error) return <div className="text-red-500">–û—à–∏–±–∫–∞: {error}</div>;
  if (!levelData) return <div>–£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</div>;

  return (
    <div>
      {/* ... */}
      <button onClick={onBackToMenu} className="mb-4 text-gray-500 hover:text-gray-800">
        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è
      </button>
      <div className="p-6 border rounded-lg bg-gray-50">
        <h2 className={`text-3xl font-bold text-center text-gray-800 mb-6 tracking-widest transition-transform duration-500 ${isShaking ? 'animate-shake' : ''}`}>
          {levelData.baseWord.toUpperCase()}
        </h2>

        {/* <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ü–µ—Ä–µ–¥–∞–µ–º –≤ WordGrid –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ foundWords >>> */}
        {/* –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ `progress` –∏–∑–º–µ–Ω–∏—Ç—Å—è, `foundWords` –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç—Å—è, –∏ —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è */}
        <WordGrid wordsLengths={levelData.wordsLengths} foundWords={foundWords} />

        <WordBuilder word={currentWord} />
        <div className="flex justify-center items-center gap-2 md:gap-4 mt-8">
          <button onClick={handleHint} title="–ü–æ–¥—Å–∫–∞–∑–∫–∞" className="p-3 h-14 bg-yellow-200 rounded-lg text-2xl" disabled={isChecking}>üí°</button>
          <LetterButtons letters={letters} usedIndices={usedIndices} onLetterClick={handleLetterClick} />
          <button onClick={handleDeleteLastLetter} title="–£–¥–∞–ª–∏—Ç—å" className="p-3 h-14 bg-orange-200 rounded-lg text-2xl" disabled={isChecking}>‚Üê</button>
          <button onClick={handleSubmitWord} title="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" className="p-3 h-14 bg-green-200 rounded-lg text-2xl" disabled={isChecking}>‚úì</button>
        </div>
      </div>
    </div>
  );
}