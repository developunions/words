// src/components/layout/LevelSelector.tsx
import Link from 'next/link';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —É—Ä–æ–≤–Ω—è
export type LevelStatus = 'completed' | 'playable' | 'locked';

// –¢–∏–ø –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –µ–≥–æ —Å—Ç–∞—Ç—É—Å–æ–º
export type LevelWithStatus = {
  id: number;
  wordCount: number;
  order: number;
  status: LevelStatus;
};

// –¢–∏–ø—ã –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
type LevelSelectorProps = {
  easyLevels: LevelWithStatus[];
  mediumLevels: LevelWithStatus[];
  hardLevels: LevelWithStatus[];
  isMediumLocked: boolean;
  isHardLocked: boolean;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π
const DifficultySection = ({ title, levels, isLocked }: { title: string, levels: LevelWithStatus[], isLocked: boolean }) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è CSS-–∫–ª–∞—Å—Å–æ–≤ –∫—Ä—É–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const getStatusClasses = (status: LevelStatus): string => {
    switch (status) {
      case 'completed':
        return 'bg-green-500 border-green-600 text-white font-bold';
      case 'playable':
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        return 'bg-yellow-200 border-yellow-400 animate-pulse';
      case 'locked':
      default:
        // –î–µ–ª–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
        return 'bg-gray-100 border-gray-200 text-gray-400 pointer-events-none';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –∫—Ä—É–≥–∞ —É—Ä–æ–≤–Ω—è
  const renderLevel = (level: LevelWithStatus) => {
    const content = (
      <div
        className={`flex items-center justify-center p-2 border-2 rounded-full aspect-square text-lg font-semibold transition-colors ${getStatusClasses(level.status)}`}
        title={`–£—Ä–æ–≤–µ–Ω—å ${level.id}`}
      >
        {level.status === 'locked' ? 'üîí' : level.id}
      </div>
    );

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    return level.status !== 'locked' ? (
      <Link href={`/game/${level.id}`} key={level.id}>{content}</Link>
    ) : (
      <div key={level.id}>{content}</div>
    );
  };

  return (
    <div className="mb-8">
      <h3 className="text-xl font-bold text-gray-800 mb-4 pb-2 border-b-2">{title}</h3>
      {isLocked ? (
        <div className="flex items-center justify-center bg-gray-100 p-8 rounded-lg text-gray-500">
          <span className="text-5xl mr-4">üîí</span>
          <span>–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–≤–Ω–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É —Å–µ–∫—Ü–∏—é.</span>
        </div>
      ) : (
        <div className="grid grid-cols-5 sm:grid-cols-8 md:grid-cols-10 gap-4">
          {levels.map(renderLevel)}
        </div>
      )}
    </div>
  );
};

export default function LevelSelector({ easyLevels, mediumLevels, hardLevels, isMediumLocked, isHardLocked }: LevelSelectorProps) {
  return (
    <div>
      <h2 className="text-2xl font-bold mb-6 text-center text-gray-700">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å</h2>
      <DifficultySection title="–õ–µ–≥–∫–∏–µ" levels={easyLevels} isLocked={false} />
      <DifficultySection title="–°—Ä–µ–¥–Ω–∏–µ" levels={mediumLevels} isLocked={isMediumLocked} />
      <DifficultySection title="–°–ª–æ–∂–Ω—ã–µ" levels={hardLevels} isLocked={isHardLocked} />
    </div>
  );
}
