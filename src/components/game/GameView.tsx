// src/components/game/GameView.tsx
'use client';

import { useState, useEffect, useMemo } from 'react';
import LetterButtons from './LetterButtons';
import WordGrid from './WordGrid';
import { useProgress } from '@/context/ProgressContext';
import GameHeader from './GameHeader';

// ... (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã WordBuilder –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function WordBuilder({ word }: { word: string }) {
  return (
    <div className="my-6 flex justify-center items-center h-16 bg-white border-2 rounded-lg shadow-inner">
      <p className="text-3xl font-bold tracking-[.2em] text-gray-800">
        {word.toUpperCase()}
      </p>
    </div>
  );
}


// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º onBackToMenu –∏–∑ —Ç–∏–ø–æ–≤
type GameViewProps = { levelId: number; };
type LevelData = { id: number; baseWord: string; wordsLengths: number[]; };

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º onBackToMenu –∏–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ props
export default function GameView({ levelId }: GameViewProps) {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [levelData, setLevelData] = useState<LevelData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentWord, setCurrentWord] = useState('');
  const [usedIndices, setUsedIndices] = useState<number[]>([]);
  const [isShaking, setIsShaking] = useState(false);
  const [isChecking, setIsChecking] = useState(false);
  
  const { progress, addFoundWord } = useProgress();
  const foundWords = useMemo(() => progress[levelId] || [], [progress, levelId]);

  // –í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (useEffect, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    setIsLoading(true);
    setError(null);
    const fetchLevelData = async () => {
      try {
        const res = await fetch(`/api/levels/${levelId}`);
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è');
        const data = await res.json();
        setLevelData(data);
      } catch (err) {
        if (err instanceof Error) setError(err.message);
        else setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setIsLoading(false);
      }
    };
    fetchLevelData();
  }, [levelId]);
  
  const letters = useMemo(() => {
    if (!levelData) return [];
    return levelData.baseWord.split('');
  }, [levelData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
  const handleLetterClick = (letter: string, index: number) => {
    if (usedIndices.includes(index) || isChecking) return;
    setCurrentWord(currentWord + letter);
    setUsedIndices([...usedIndices, index]);
  };

  const handleDeleteLastLetter = () => {
    if (currentWord.length === 0 || isChecking) return;
    setCurrentWord(currentWord.slice(0, -1));
    setUsedIndices(usedIndices.slice(0, -1));
  };
  
  const clearInput = () => {
    setCurrentWord('');
    setUsedIndices([]);
  };

  const handleSubmitWord = async () => {
    if (!currentWord || isChecking || foundWords.includes(currentWord)) {
      clearInput();
      return;
    }
    setIsChecking(true);
    const wordToCheck = currentWord;

    try {
      const res = await fetch(`/api/levels/${levelId}/check`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ word: wordToCheck }),
      });
      const { correct } = await res.json();
      if (correct) {
        addFoundWord(levelId, wordToCheck);
      } else {
        setIsShaking(true);
        setTimeout(() => setIsShaking(false), 500);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ–≤–∞:", error);
    } finally {
      clearInput();
      setIsChecking(false);
    }
  };
  
  const handleHint = async () => {
    if(isChecking) return;
    setIsChecking(true);
    try {
      const res = await fetch(`/api/levels/${levelId}/hint`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ foundWords }),
      });
      if (res.ok) {
        const { hint } = await res.json();
        addFoundWord(levelId, hint);
      } else {
        console.log("–ü–æ–¥—Å–∫–∞–∑–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏:", error);
    } finally {
      setIsChecking(false);
    }
  };
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞
  if (isLoading) return <div className="text-center p-10">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è...</div>;
  if (error) return <div className="text-red-500 text-center p-10">–û—à–∏–±–∫–∞: {error}</div>;
  if (!levelData) return <div className="text-center p-10">–£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</div>;

  return (
    <div>
      <GameHeader baseWord={levelData.baseWord} isShaking={isShaking} />
      <div className="p-6 border rounded-lg bg-gray-50">
        <WordGrid wordsLengths={levelData.wordsLengths} foundWords={foundWords} />
        <WordBuilder word={currentWord} />
        <div className="flex justify-center items-center gap-2 md:gap-4 mt-8">
          <button onClick={handleHint} title="–ü–æ–¥—Å–∫–∞–∑–∫–∞" className="p-3 h-14 bg-yellow-200 rounded-lg text-2xl" disabled={isChecking}>üí°</button>
          <LetterButtons letters={letters} usedIndices={usedIndices} onLetterClick={handleLetterClick} />
          <button onClick={handleDeleteLastLetter} title="–£–¥–∞–ª–∏—Ç—å" className="p-3 h-14 bg-orange-200 rounded-lg text-2xl" disabled={isChecking}>‚Üê</button>
          <button onClick={handleSubmitWord} title="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" className="p-3 h-14 bg-green-200 rounded-lg text-2xl" disabled={isChecking}>‚úì</button>
        </div>
      </div>
    </div>
  );
}